}
CL=temp
CL_label=unique(CL_label)
# find cluster with 1 sign difference, merge to create new cluster
while(length(CL_label)>1){
label_pair=combn(CL_label,2)
new_label=apply(label_pair,2,labelCombiner)
w=which(new_label%in%CL_label)
new_label[w]=NA
if(sum(!is.na(new_label))==0){break}
w=which(!is.na(new_label))
CL_label=c(CL_label,new_label[w])
new_CL=lapply(w, function(i){
l1=label_pair[1,i]
l2=label_pair[2,i]
w1=which(CL_label==l1)
w2=which(CL_label==l2)
new_CL=unique(unlist(CL[c(w1,w2)]))
return(new_CL)
})
CL=c(CL,new_CL)
}
#make sure CL is unique
temp=list()
for(l in unique(CL_label)){
w=which(CL_label==l)
temp= c(temp, list(unique(unlist(CL[w]))) )
}
CL_label=unique(CL_label)
CL_label=labelUnifier(CL_label)
CL=temp
CL
CL_label=CL_label[CL_label!=""]
if(length(CL_label)==0){print("No clusters found");next}
CL_label2=strsplit(CL_label,split="\\|")
CL=list()
for(i in 1:length(CL_label2)){
rows=sapply(CL_label2[[i]],function(x){
m=gsub("\\+$|-$","",x)
if(grepl("\\+$",x)){w=which(expr[,m]>cutoff[m])}
if(grepl("-$",x)){w=which(expr[,m]<cutoff[m])}
#w=which(expr[,m]<quantile(expr_ind[CL[[i]],m],1) & expr[,m]>quantile(expr_ind[CL[[i]],m],0) )
return(w)
})
if(length(CL_label2[[i]])>1){rows=Reduce(intersect,rows)}
CL[[i]]=rows
}
id_keep=which(sapply(CL,length)>minimumClusterSizePercent*nrow(expr))
if(length(id_keep)<1){next}
CL=CL[id_keep]
CL_label=CL_label[id_keep]
CL_label=CL_label[CL_label!=""]
if(length(CL_label)==0){print("No clusters found");next}
CL_label=CL_label[CL_label!=""]
CL_label2=strsplit(CL_label,split="\\|")
CL=list()
for(i in 1:length(CL_label2)){
rows=sapply(CL_label2[[i]],function(x){
m=gsub("\\+$|-$","",x)
if(grepl("\\+$",x)){w=which(expr[,m]>cutoff[m])}
if(grepl("-$",x)){w=which(expr[,m]<cutoff[m])}
#w=which(expr[,m]<quantile(expr_ind[CL[[i]],m],1) & expr[,m]>quantile(expr_ind[CL[[i]],m],0) )
return(w)
})
if(length(CL_label2[[i]])>1){rows=Reduce(intersect,rows)}
CL[[i]]=rows
}
CL_label2
CL_label
#create output foler
dir.create(file.path(outpath),recursive=T)
#prepare exclude parameters
excludeClusterParameters=toupper(excludeClusterParameters)
cluster_summary=NULL
cat("Clustering , fcs file name = ",fcsFile, "\n")
##### 1) read sample files for each study--------
fcs=flowCore::read.FCS(fcsFile, transformation = "linearize", alter.names = FALSE)
# make sure the fcs file antibody names are the same as the preprocessed output
channels=as.vector(flowCore::pData(flowCore::parameters(fcs))[,1])
# get antibody names
antibodies=as.vector(flowCore::pData(flowCore::parameters(fcs))[,2])
antibodies=sapply(1:length(antibodies), function(i){
if(is.na(antibodies[i])|antibodies[i]=="NA"){return(channels[i])}else{antibodies[i]}
})
##### 2) subset the cells in fcs-----------
# Get expression matrix
expr=flowCore::exprs(fcs);
colnames(expr)=antibodies
# subset on columns
w=!antibodies%in%excludeClusterParameters
antibodies=antibodies[w]
expr=expr[,w]
expr_scale=scale(expr,center=F,scale=T)
expr_sample=rep(1,nrow(expr))
# 3) cluster the subset samples, find clusters large enough------------
max_cell_N=20000
if(nrow(expr_scale)>max_cell_N){
ind=sample(1:nrow(expr_scale),max_cell_N,replace=F)
D=dist(expr_scale[ind,])
}else{
D=dist(expr_scale)
}
HC=fastcluster::hclust(D,method="ward.D")
CL=HC.assign(HC,minimumClusterSizePercent)
# 4) label the clusters:--------------
#find cutoff of each parameter
cutoff=apply(X=expr,MARGIN=2,FUN=findCutoff)
#label each cluster
CL_label=rep(NA,length(CL))
if(nrow(expr_scale)>max_cell_N){expr_ind=expr[ind,]}else{expr_ind=expr}
no_label=sapply(1:length(antibodies),function(i){
x1=quantile(expr_ind[,i],minimumClusterSizePercent)
x2= quantile(expr_ind[,i],(1-minimumClusterSizePercent))
if(cutoff[i]<x1|cutoff[i]>x2){return(T)}else{return(F)}
})
for(i in 1:length(CL)){
l=c()
for(j in 1:length(antibodies)){
if(no_label[j]==T){next}
x=expr_ind[CL[[i]],j]
if(quantile(x,labelQuantile)<cutoff[j]){
l=c(l,paste0(antibodies[j],"-"))
}else if(quantile(x,(1-labelQuantile))>cutoff[j]){
l=c(l,paste0(antibodies[j],"+"))
}
}
l=paste(l,collapse="|")
CL_label[i]=l
}
CL_label
temp=list()
for(l in unique(CL_label)){
w=which(CL_label==l)
temp= c(temp, list(unique(unlist(CL[w]))) )
}
CL=temp
CL_label=unique(CL_label)
CL_label
while(length(CL_label)>1){
label_pair=combn(CL_label,2)
new_label=apply(label_pair,2,labelCombiner)
w=which(new_label%in%CL_label)
new_label[w]=NA
if(sum(!is.na(new_label))==0){break}
w=which(!is.na(new_label))
CL_label=c(CL_label,new_label[w])
new_CL=lapply(w, function(i){
l1=label_pair[1,i]
l2=label_pair[2,i]
w1=which(CL_label==l1)
w2=which(CL_label==l2)
new_CL=unique(unlist(CL[c(w1,w2)]))
return(new_CL)
})
CL=c(CL,new_CL)
}
CL_label
temp=list()
for(l in unique(CL_label)){
w=which(CL_label==l)
temp= c(temp, list(unique(unlist(CL[w]))) )
}
CL_label=unique(CL_label)
CL_label=labelUnifier(CL_label)
CL=temp
CL_label
CL_label=CL_label[CL_label!=""]
CL_label
CL_label2=strsplit(CL_label,split="\\|")
CL_label2
CL=list()
for(i in 1:length(CL_label2)){
rows=sapply(CL_label2[[i]],function(x){
m=gsub("\\+$|-$","",x)
if(grepl("\\+$",x)){w=which(expr[,m]>cutoff[m])}
if(grepl("-$",x)){w=which(expr[,m]<cutoff[m])}
#w=which(expr[,m]<quantile(expr_ind[CL[[i]],m],1) & expr[,m]>quantile(expr_ind[CL[[i]],m],0) )
return(w)
})
if(length(CL_label2[[i]])>1){rows=Reduce(intersect,rows)}
CL[[i]]=rows
}
CL_label2
i
x=CL_label2[[i]][1]
m=gsub("\\+$|-$","",x)
m
#create output foler
dir.create(file.path(outpath),recursive=T)
#prepare exclude parameters
excludeClusterParameters=toupper(excludeClusterParameters)
cluster_summary=NULL
cat("Clustering , fcs file name = ",fcsFile, "\n")
##### 1) read sample files for each study--------
fcs=flowCore::read.FCS(fcsFile, transformation = "linearize", alter.names = FALSE)
# make sure the fcs file antibody names are the same as the preprocessed output
channels=as.vector(flowCore::pData(flowCore::parameters(fcs))[,1])
# get antibody names
antibodies=as.vector(flowCore::pData(flowCore::parameters(fcs))[,2])
antibodies=sapply(1:length(antibodies), function(i){
if(is.na(antibodies[i])|antibodies[i]=="NA"){return(channels[i])}else{antibodies[i]}
})
antibodies=toupper(antibodies)
##### 2) subset the cells in fcs-----------
# Get expression matrix
expr=flowCore::exprs(fcs);
colnames(expr)=antibodies
# subset on columns
w=!antibodies%in%excludeClusterParameters
antibodies=antibodies[w]
expr=expr[,w]
expr_scale=scale(expr,center=F,scale=T)
expr_sample=rep(1,nrow(expr))
# 3) cluster the subset samples, find clusters large enough------------
max_cell_N=20000
if(nrow(expr_scale)>max_cell_N){
ind=sample(1:nrow(expr_scale),max_cell_N,replace=F)
D=dist(expr_scale[ind,])
}else{
D=dist(expr_scale)
}
HC=fastcluster::hclust(D,method="ward.D")
CL=HC.assign(HC,minimumClusterSizePercent)
# 4) label the clusters:--------------
#find cutoff of each parameter
cutoff=apply(X=expr,MARGIN=2,FUN=findCutoff)
#label each cluster
CL_label=rep(NA,length(CL))
if(nrow(expr_scale)>max_cell_N){expr_ind=expr[ind,]}else{expr_ind=expr}
no_label=sapply(1:length(antibodies),function(i){
x1=quantile(expr_ind[,i],minimumClusterSizePercent)
x2= quantile(expr_ind[,i],(1-minimumClusterSizePercent))
if(cutoff[i]<x1|cutoff[i]>x2){return(T)}else{return(F)}
})
for(i in 1:length(CL)){
l=c()
for(j in 1:length(antibodies)){
if(no_label[j]==T){next}
x=expr_ind[CL[[i]],j]
if(quantile(x,labelQuantile)<cutoff[j]){
l=c(l,paste0(antibodies[j],"-"))
}else if(quantile(x,(1-labelQuantile))>cutoff[j]){
l=c(l,paste0(antibodies[j],"+"))
}
}
l=paste(l,collapse="|")
CL_label[i]=l
}
##### 5) merge clusters-----------
#merge clusters with the same labels
temp=list()
for(l in unique(CL_label)){
w=which(CL_label==l)
temp= c(temp, list(unique(unlist(CL[w]))) )
}
CL=temp
CL_label=unique(CL_label)
# find cluster with 1 sign difference, merge to create new cluster
while(length(CL_label)>1){
label_pair=combn(CL_label,2)
new_label=apply(label_pair,2,labelCombiner)
w=which(new_label%in%CL_label)
new_label[w]=NA
if(sum(!is.na(new_label))==0){break}
w=which(!is.na(new_label))
CL_label=c(CL_label,new_label[w])
new_CL=lapply(w, function(i){
l1=label_pair[1,i]
l2=label_pair[2,i]
w1=which(CL_label==l1)
w2=which(CL_label==l2)
new_CL=unique(unlist(CL[c(w1,w2)]))
return(new_CL)
})
CL=c(CL,new_CL)
}
#make sure CL is unique
temp=list()
for(l in unique(CL_label)){
w=which(CL_label==l)
temp= c(temp, list(unique(unlist(CL[w]))) )
}
CL_label=unique(CL_label)
CL_label=labelUnifier(CL_label)
CL=temp
CL_label=CL_label[CL_label!=""]
CL_label2=strsplit(CL_label,split="\\|")
CL=list()
for(i in 1:length(CL_label2)){
rows=sapply(CL_label2[[i]],function(x){
m=gsub("\\+$|-$","",x)
if(grepl("\\+$",x)){w=which(expr[,m]>cutoff[m])}
if(grepl("-$",x)){w=which(expr[,m]<cutoff[m])}
#w=which(expr[,m]<quantile(expr_ind[CL[[i]],m],1) & expr[,m]>quantile(expr_ind[CL[[i]],m],0) )
return(w)
})
if(length(CL_label2[[i]])>1){rows=Reduce(intersect,rows)}
CL[[i]]=rows
}
id_keep=which(sapply(CL,length)>minimumClusterSizePercent*nrow(expr))
if(length(id_keep)<1){next}
CL=CL[id_keep]
CL_label=CL_label[id_keep]
dir.create(file.path(paste(outpath,std,sep="/")))
CL_median=lapply(CL,function(x){apply(expr[x,],2,median)})
CL_median=data.frame(matrix(unlist(CL_median), ncol=length(CL_median[[1]]), byrow=T))
CL_median=cbind(std,paste0("cluster",1:length(CL)),unique(CL_label),CL_median)
names(CL_median)=c("study","cluster_id","label",antibodies)
CL_median=lapply(CL,function(x){apply(expr[x,],2,median)})
CL_median=data.frame(matrix(unlist(CL_median), ncol=length(CL_median[[1]]), byrow=T))
CL_median=cbind(std,paste0("cluster",1:length(CL)),unique(CL_label),CL_median)
CL_median=cbind(paste0("cluster",1:length(CL)),unique(CL_label),CL_median)
names(CL_median)=c("cluster_id","label",antibodies)
write.csv(CL_median,paste(outpath,"cluster_median.csv",sep="/"),row.names=F)
SP_stat=NULL
for(i in 1:length(CL)){
for(j in unique(expr_sample)){
w=intersect( which(expr_sample==j), CL[[i]] )
frac=length(w)/nrow(expr)
if(length(w)>1){M=apply(expr[w,],2,median)}
if(length(w)==1){M=expr[w,]}
if(length(w)==0){M=rep(NA,ncol(expr))}
t1=c(paste0("cluster",i),CL_label[i],sample_name[j],M,frac)
SP_stat=rbind(SP_stat,t1)
}
}
SP_stat=NULL
for(i in 1:length(CL)){
for(j in unique(expr_sample)){
w=intersect( which(expr_sample==j), CL[[i]] )
frac=length(w)/nrow(expr)
if(length(w)>1){M=apply(expr[w,],2,median)}
if(length(w)==1){M=expr[w,]}
if(length(w)==0){M=rep(NA,ncol(expr))}
t1=c(paste0("cluster",i),CL_label[i],fcsFile,M,frac)
SP_stat=rbind(SP_stat,t1)
}
}
colnames(SP_stat)=c("cluster_id","label","fcs_files",antibodies,"fraction")
write.csv(SP_stat,paste(outpath,std,"cluster_stats_in_each_sample.csv",sep="/"),row.names=F)
write.csv(SP_stat,paste(outpath,"cluster_stats_in_each_sample.csv",sep="/"),row.names=F)
filename=paste(outpath,"density_plot.pdf",sep="/")
height=3*length(CL);width=3*length(antibodies)
pdf(filename,width=width,height=height)
par( mfcol = c(length(CL), length(antibodies) ) )
for(i in 1:length(antibodies)){
x_all=expr[,i]
for(j in 1:length(CL)){
b=seq(min(x_all),max(x_all), ((max(x_all)-min(x_all))/100) )
hist(x_all,col=rgb(0, 0, 0, 0.2),xlab=antibodies[i],breaks=b,freq=T,border=F,main=paste0(antibodies[i]," of cluster ",j," : \n", CL_label[j]))
hist(expr[CL[[j]],i],add=T,breaks=b,col=rgb(1, 0, 0, 0.5),freq=T,border=F)
abline(v=cutoff[i])
}
}
dev.off()
filename=paste(outpath,"cluster_cell_id.RData",sep="/")
names(CL)=CL_label
save(CL,filename)
save(CL,file=filename)
source('~/Box Sync/MetaCyto_related/MetaCyto/MetaCyto_Package/R/MetaCyto_functions.R')
autoCluster.oneSample(fcsFile=fcsFile,
outpath=outpath,
excludeClusterParameters = excludeClusterParameters,
minimumClusterSizePercent = 0.05
labelQuantile=labelQuantile)
autoCluster.oneSample(fcsFile=fcsFile,
outpath=outpath,
excludeClusterParameters = excludeClusterParameters,
minimumClusterSizePercent = 0.05,
labelQuantile=labelQuantile)
load(paste0(outpath,"\cluster_cell_id.RData"))
load(paste0(outpath,"/cluster_cell_id.RData"))
CL
fcsFile="../MetaCyto_Example/Result/preprocess_output/FCM/Data_SDY736_FCM-1/Hs90208Bd_C20090205_00.583331.fcs"
outpath="../MetaCyto_Example/Result/cluster_output_one_sample"
excludeClusterParameters=c("TIME","FSC-A","FSC-W","FSC-H","SSC-A","SSC-W","SSC-H","Time","CELL_LENGTH","DEAD","DNA1","DNA2")
minimumClusterSizePercent=0.05
labelQuantile=0.8
fcsFile="../MetaCyto_Example/Result/preprocess_output/FCM/Data_SDY736_FCM-1/Hs90208Bd_C20090205_00.583331.fcs"
outpath="../MetaCyto_Example/Result/cluster_output_one_sample"
excludeClusterParameters=c("TIME","FSC-A","FSC-W","FSC-H","SSC-A","SSC-W","SSC-H","Time","CELL_LENGTH","DEAD","DNA1","DNA2")
minimumClusterSizePercent=0.05
labelQuantile=0.8
clusterLabel="CD3+|CD4+|CD8B-"
fcsFile="../MetaCyto_Example/Result/preprocess_output/FCM/Data_SDY736_FCM-1/Hs90208Bd_C20090205_00.583331.fcs"
outpath="../MetaCyto_Example/Result/search_output_one_sample"
excludeClusterParameters=c("TIME","FSC-A","FSC-W","FSC-H","SSC-A","SSC-W","SSC-H","Time","CELL_LENGTH","DEAD","DNA1","DNA2")
minimumClusterSizePercent=0.05
labelQuantile=0.8
clusterLabel="CD3+|CD4+|CD8B-"
dir.create(file.path(outpath),recursive=T)
clusterLabel=toupper(clusterLabel)
cat("Searching , file name = ",fcsFile, "\n")
fcs=flowCore::read.FCS(fcsFile, transformation = "linearize", alter.names = FALSE)
channels=as.vector(flowCore::pData(flowCore::parameters(fcs))[,1])
antibodies=as.vector(flowCore::pData(flowCore::parameters(fcs))[,2])
antibodies=sapply(1:length(antibodies), function(i){
if(is.na(antibodies[i])|antibodies[i]=="NA"){return(channels[i])}else{antibodies[i]}
})
antibodies=toupper(antibodies)
expr=flowCore::exprs(fcs);
colnames(expr)=antibodies
expr_sample=rep(1,nrow(expr))
CL_label=clusterLabel
CL_label2=strsplit(clusterLabel,split="&|\\|")
in_study=sapply(CL_label2,function(x){
Ab_in_label=gsub("\\+$|-$|\\^NE$|\\^LO$|\\^HI$","",x)
if(length(setdiff(Ab_in_label,antibodies))>0){return(F)}else{return(T)}
})
CL_label=CL_label[in_study]
CL_label2=CL_label2[in_study]
if(length(CL_label)<1){next}
t1=unlist(CL_label2)
t1=t1[grep("\\^",t1)]
t1=gsub("\\^NE$|\\^LO$|\\^HI$","",t1)
Ab_tri=unique(t1)
cutoff=apply(X=expr,MARGIN=2,FUN=findCutoff)
if(length(Ab_tri)>0){triS=apply(expr,2,trisect)}
CL=list()
for(i in 1:length(CL_label2)){
rows=sapply(CL_label2[[i]],function(x){
m=gsub("\\+$|-$|\\^NE$|\\^LO$|\\^HI$","",x)
if(grepl("\\+$",x)){w=which(expr[,m]>cutoff[m])}
if(grepl("-$",x)){w=which(expr[,m]<cutoff[m])}
if(grepl("\\^NE$",x)){w=which(expr[,m]<triS[2,m])}
if(grepl("\\^LO$",x)){w=which(expr[,m]<triS[1,m])&expr[,m]>triS[2,m]}
if(grepl("\\^HI$",x)){w=which(expr[,m]>triS[1,m])}
return(w)
})
if(length(CL_label2[[i]])>1){rows=Reduce(intersect,rows)}
CL[[i]]=rows
}
CL_count=sapply(CL,length)
CL=CL[CL_count>1]
CL_label=CL_label[CL_count>1]
if(length(CL)<1){next}
dir.create(file.path(paste(outpath,std,sep="/")))
CL_median=lapply(CL,function(x){apply(expr[x,],2,median)})
CL_median=data.frame(matrix(unlist(CL_median), ncol=length(CL_median[[1]]), byrow=T))
CL_median=cbind(paste0("cluster",1:length(CL)),unique(CL_label),CL_median)
names(CL_median)=c("cluster_id","label",antibodies)
write.csv(CL_median,paste(outpath,"cluster_median.csv",sep="/"),row.names=F)
cluster_summary=rbind(cluster_summary,data.frame("cluster_id"=CL_median$cluster_id,"label"=unique(CL_label)))
sample_name=subset(inputMeta$fcs_files,inputMeta$study_id==std)
source('~/Box Sync/MetaCyto_related/MetaCyto/MetaCyto_Package/R/MetaCyto_functions.R')
source('~/Box Sync/MetaCyto_related/MetaCyto/MetaCyto_Package/R/MetaCyto_functions.R')
searchCluster.oneSample(fcsFile,
outpath=outpath,
clusterLabel,
ifPlot=T)
load(paste0(outpath,"/cluster_cell_id.RData"))
CL
source('~/Box Sync/MetaCyto_related/MetaCyto/MetaCyto_Package/R/MetaCyto_functions.R')
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
setwd("~/Desktop/Local_Projects/MetaCyto_Paper/Code")
setwd("~/Box Sync/MetaCyto_related/MetaCyto/MetaCyto_Package")
source('~/Box Sync/MetaCyto_related/MetaCyto/MetaCyto_Package/R/MetaCyto_functions.R')
library(MetaCyto)
system.file("extdata", "SDY420", package = "MetaCyto")
list.files(a)
a=system.file("extdata", "SDY420", package = "MetaCyto")
list.files(a)
library(MetaCyto)
library(MetaCyto)
library(MetaCyto)
